name: Push Latest Release to External Repo
on:
  workflow_dispatch:
  release:
    types: [published]

jobs:
  push-latest-release:
    runs-on: ubuntu-latest
    steps:
      - name: Get Latest Release
        id: get-latest
        uses: actions/github-script@v7
        with:
          script: |
            let releaseData;


            // Manual trigger - find the latest release
            try {
              // First try to get the latest release
              console.log('Fetching latest release...');
              const latestResponse = await github.rest.repos.getLatestRelease({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              releaseData = latestResponse.data;
              console.log('Found latest release:', releaseData.tag_name);
              
            } catch (error) {
              if (error.status === 404) {
                console.log('No "latest" release found, fetching all releases...');
                
                // If no "latest" release, get all releases and pick the most recent
                const allReleasesResponse = await github.rest.repos.listReleases({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 1  // Only get the first (most recent) one
                });
                
                if (allReleasesResponse.data.length > 0) {
                  releaseData = allReleasesResponse.data[0];
                  console.log('Found most recent release:', releaseData.tag_name);
                } else {
                  throw new Error('No releases found in this repository. Please create a release first.');
                }
              } else {
                throw error;
              }
            }


            // Log release details
            console.log('Release details:', {
              tag_name: releaseData.tag_name,
              name: releaseData.name,
              draft: releaseData.draft,
              prerelease: releaseData.prerelease,
              published_at: releaseData.published_at,
              created_at: releaseData.created_at
            });

            // Set outputs
            core.setOutput('tag_name', releaseData.tag_name);
            core.setOutput('name', releaseData.name || `Release ${releaseData.tag_name}`);
            core.setOutput('body', releaseData.body || 'No release notes provided');
            core.setOutput('draft', releaseData.draft);
            core.setOutput('prerelease', releaseData.prerelease);
            core.setOutput('published_at', releaseData.published_at);
            core.setOutput('html_url', releaseData.html_url);

            return releaseData;

      - name: Push to External Repository
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.CROSS_REPO_SECRET }}
          repository: felixcheng/testing
          tag_name: ${{ steps.get-latest.outputs.tag_name }}
          name: ${{ steps.get-latest.outputs.name }}
          body: |
            ${{ steps.get-latest.outputs.body }}

          draft: false # Always publish to external repo, even if source was draft
          prerelease: ${{ steps.get-latest.outputs.prerelease }}

      - name: Summary
        run: |
          echo "‚úÖ Successfully pushed release to external repository"
          echo "üì¶ Release: ${{ steps.get-latest.outputs.name }}"
          echo "üè∑Ô∏è Tag: ${{ steps.get-latest.outputs.tag_name }}"
          echo "üéØ Target: felixcheng/testing"
